// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: receipts.sql

package database

import (
	"context"
)

const createReceipt = `-- name: CreateReceipt :exec
INSERT INTO receipts (
    created_at, updated_at, truck_reg, trailer_reg, gross, tare, net, doc_type, grain_type 
    )
VALUES (
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
`

type CreateReceiptParams struct {
	TruckReg   string
	TrailerReg string
	Gross      int32
	Tare       int32
	Net        int32
	DocType    string
	GrainType  string
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) error {
	_, err := q.db.ExecContext(ctx, createReceipt,
		arg.TruckReg,
		arg.TrailerReg,
		arg.Gross,
		arg.Tare,
		arg.Net,
		arg.DocType,
		arg.GrainType,
	)
	return err
}

const getAllReceipts = `-- name: GetAllReceipts :many
SELECT id, created_at, updated_at, truck_reg, trailer_reg, gross, tare, net, doc_type, grain_type FROM receipts
`

func (q *Queries) GetAllReceipts(ctx context.Context) ([]Receipt, error) {
	rows, err := q.db.QueryContext(ctx, getAllReceipts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Receipt
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TruckReg,
			&i.TrailerReg,
			&i.Gross,
			&i.Tare,
			&i.Net,
			&i.DocType,
			&i.GrainType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentInventory = `-- name: GetCurrentInventory :one
SELECT SUM(net)
FROM receipts
`

func (q *Queries) GetCurrentInventory(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentInventory)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}
